;	ELF75C.1
	.TITLE	NNCP4 -- EXPERIMENTAL NCP (XNCP) PRIMITIVES
	$CNFIG
	$DFREG
	$DFCT
	$DFHTE
	$DFXCT
	$NPARM			;DEFINE NCP PARAMETERS

	.GLOBL	$SHL,$BLDCT,$MALCL,$SLL,$RLSCT
	.GLOBL	$LSLST,$FXCTB
	.GLOBL	$XCON,$XLSN,$XCLS	;XNCP ENTRY POINTS
	.GLOBL	$NXLSN,$NXCON,$NXCLS
	.GLOBL	$FXCTB
	.GLOBL	$NCPI

;			XNCP PARAMETERS

XENDFH	=	201		;XNCP ERROR -- UNDEFINED HOST ON $XONC
XENXL	=	202		;XNCP ERROR -- NOT EXPERIMENTAL LINK
XECLSE	=	203		;ATTEMT TO XCLS NON X CONNX
XECLS	=	204		;ATTEMPT XCLS UNKNOWN CONNX


;			DEFINITION OF XCCT

XCHOS	=	0		; XCCT HOST NR (FOR $XCON)
XCSTA	=	2		;XCCT STATUS BYTE
XCOPC	=	3		;OPCODE FOR X CONNX
XCLNK	=	4		;XCCT LINK NUMBER (WORD)


	.SBTTL	ATRIUM TO XNCP PRIMITIVES

$NXCON:	JSR	PC,$XCON
	RTI

$NXLSN:	JSR	PC,$XLSN
	RTI

$NXCLS:	JSR	PC,$XCLS
	RTI

	.PAGE
	.SBTTL	$XCON -- ESTABLISH EXPERIMENTAL CONNECTION

;			***  $XCON  ***

;			ASSUMES R0 POINTS TO EXPERIMENTAL
;			CONNECTION CONTROL TABLE (XCCT)

$XCON:	$PUSH	R0,R2,R3,R4	;SAVE REGISTERS
	CLRB	XCSTA(R0)	;INIT STATUS
	MOV	R0,XN.CCT	;SAVE POINTER TO XCCT
	MOV	(R0),R0		;SEARCH HOST LIST
	JSR	PC,$SHL		;FIND ENTRY IN LIST
	BEQ	XCONUD		;CAN'T FIND IT.
XLS01:	MOV	R1,XN.HTE	;SAVE HTE POINTER
	MOV	XN.CCT,R4	;CCT POINTER AGAIN
	MOV	XCLNK(R4),R0	;GET EXPERIMENTAL LINK NR
	CMP	R0,#XLNK*256.	;IS IT ALLOWED EXPERIMENTAL LINK?
	BLO	XLNKE1		;NOPE, LINK ERROR

;			IF EXPERIMENTAL CONNECTION, TREAT LINK
;			NR AS LOCAL SOCKET NR...
;			LOCAL SOCKET NUMBER IN CT APPEARS
;			AS SPECIFIED LINK NR + Z, WHERE
;			Z = 0 IF RECEIVE, Z = 1 IF SEND.

	JSR	PC,$BLDCT	;ALLOCATE CONNECTION TBL
	MOV	XN.CCT,R4	;CCT ADDR AGAIN TO R4
	MOV	R4,CTCCT(R2)		; SAVE XCCT ADDR IN CT.
	$GAPID				; GET CALLER'S PROCESS ID,
	MOVB	R0,CTPCI(R2)		; STORE IT IN THE CT.
	MOVB	XCOPC(R4),CTOPC(R2)	;SET OPCODE IN CT
	MOVB	#106,CTSTAT(R2)	;SET EXPERIMENTAL LINK OPENED.
	MOVB	CTLCL+1(R2),CTLINK(R2)	;SET LINK NUMBER
	MOV	R2,R1		;SET SIGNALLING COMPLETION CODE
	$SIGNL	$NCPI,#4,R1	;SIGNAL NCP PROCESS CONNX OPENED
	MOV	CTIPPN(R2),R1	;IPP NUMBER TO R1
XCONR:	$POP	R4,R3,R2,R0	;RESTORE REGISTERS
	BIS	#200,XCSTA(R0)	;SET STATUS COMPLETION (DONE)
	RTS	PC		;AND RETURN
XLNKE1:	MOV	XN.CCT,R0	;RESTORE REG 0 (CCT POINTER
	BIS	#XENXL,XCSTA(R0)	;SET COMPLETION ERROR STATUS
	BR	XCONR		;RESTORE REGISTERS, RETURN
XCONUD:	MOV	XN.CCT,R0	;OBTAIN CCT ADDRESS
	BIS	#XENDFH,XCSTA(R0) ;SET COMPLETION CODE (NO HOST)
	BR	XCONR		;RETURN

	.PAGE
	.SBTTL	$XLSN -- INIT LISTENING XPERIMENTAL CONNX

$XLSN:	$PUSH	R0,R2,R3,R4	;SAVE CALLER REGS
	MOV	R0,XN.CCT	;SET CCT POINTER
	CLR	R1		;INDICATE NO HOST ASSOC.
	BR	XLS01		;CONTINUE AS IF XCON

	.PAGE
	.SBTTL	$XCLS -- CLOSE EXPERIMENTAL CONNECTION

$XCLS:	MOV	R0,XN.CCT	;MOVE IN EXPERIMENTAL CONNEC
	$PUSH	R0,R1,R2,R3,R4
	MOV	XCLNK(R0),R0	;GET EXPERIMENTAL LINK NR
	JSR	PC,$SLL		;IS IT LISTENING?
	BNE	XNCLL2		;YES, CLOSE HIM
	MOV	@XN.CCT,R0	;GET HOST ID
	JSR	PC,$SHL		;FIND HOST ID
	BEQ	XNCERR		;CAN'T FIND HOST SPECIFIED
	MOV	R1,XN.HTE	;SET HOST SPEC (HTE PTR)
;;;;	JSR	PC,$MALCL	;MATCH LOCAL SOCKET NR
	JSR	PC,$FXCTB	; ******* TEMP? ********
	BEQ	XNCERR		;COULDN'T FIND LOCAL SOCK
XNCLL2:	BIT	#100,CTSTAT(R2)	;WAS IT X CONNX ?
	BEQ	XNCER2		;NO, ERROR
	CLRB	CTSTAT(R2)	;RELEASE CT.
	MOV	CTHTA(R2),R4	;HTE ADDR TO R4
	BEQ	RLSL		;MUST BE LISTG XCONN IF HTE PTR 0
	BIT	#1,CTLCL(R2)	; NOW DETERMINE IF SEND OR RECEIVE
	BNE	XCSND0		; BRANCH IF WAS SENDING XCONNX.
	ADD	#HTECTI,R4	; OBTAIN BASE OF INPUT CONNX LIST
XC2:	MOV	R4,R3		;KEEP POINTER TO PREV. ENTRY IN R3
	MOV	(R3),R4		; ADVANCE TO NEXT
	BEQ	XGRIEF		; WHOOPS, CANS FIND CT IN LIST
	CMP	R4,R2		; SEE IF THIS IS IT (CT)
	BNE	XC2		; BRANCH IF NEED TO SEARCH FURTHER
	MOV	(R2),(R3)	; DE-LINK CT FROM HTE CHAIN
	$UDDEV	CTIPP(R2),CTIPPN(R2) ; UNDEFINE IPP
	CLRB	CTLINK(R2)	;INDICATE NO LINK
	JSR	PC,$RLSCT	;RELEASE CT
XGRIEF:	BR	XNCLL		;BACK TO RESTORE REGS AND RETURN
XCSND0:	ADD	#HTECTO,R4	;POINT TO OUTPUT LIST
	BR	XC2		;AND SEARCH FOR SPEC CT IN LIST
RLSL:	MOV	#$LSLST,R4	;ADDR OF LISTENING-LIST RO R4
	BR	XC2		;FIND CT AND DELETE HIM FROM LSNLST

XNCERR:	MOV	XN.CCT,R0	;CCT ADDRESS TO R0
	BIS	#XECLS,XCSTA(R0)  ; INVALID CLOSE
	BR	XNCLL
XNCER2:	MOV	XN.CCT,R0	;CCT ADDRX TO R0
	BIS	#XECLSE,XCSTA(R0)	; ATTEMPT CLOSE NON-XLNK
XNCLL:	$POP	R4,R3,R2,R1,R0	; RESTORE REGS.
	RTS	PC		; IT WAS LISTENING


XN.HTE:	.WORD	0
XN.CCT:	.WORD	0

	.PAGE
	.SBTTL	XNCP PROCEDURES

;			***  $FXCTB  ***

;			THIS PROCEDURE FINDS A CT ENTRY ASSOCIATED
;			WITH AN EXPERIMENTAL CONNECTION,
;			GIVEN A HOST TABLE ADDRESS IN R1 AND
;			A LINK NUMBER IN R0.

$FXCTB:	MOV	$LSLST,R2	;IS IT ON LISTENING-LIST ?
	BEQ	XNC2		;NO -- NO ENTRIES ON THAT LIST
XNCPI2:	BIT	#100,CTSTAT(R2)	; ENSURE THAT THIS IS AN XPER-CONNX
	BEQ	XNC1		;NO, CHECK NEXT
	BIT	#1,CTLCL(R2)	;IS IT RECEIVING CONNX??
	BNE	XNC1		;NO, ONLY ALLOW RCV LOOK-UPS
	CMPB	R0,CTLINK(R2)	;IS IT SPECIFIED LINK NUMBER?
	BEQ	XNCF		;OK, WE FOUND IT
XNC1:	MOV	(R2),R2		; MOVE TO NEXT CT IN CHAIN
	BNE	XNCPI2	;ONLY IF ONE IS DEFINED
XNC2:	MOV	HTECTI(R1),R2	;GET HEAD OF HOST-LIST CHAIN (INPUT)
	BEQ	XNCNUL		;NONE DEFINED INPUT
XNC4:	BIT	#100,CTSTAT(R2)	;ENSURE THAT ITS XCONNX
	BEQ	XNC3	;NO, ADVANCE TO NEXT
	BIT	#1,CTLCL(R2)	;IS IT RECEIVING CONNEXTION ??
	BNE	XNC3		;ONLY ALLOW RECEIVE LOOKUPS
	CMPB	R0,CTLINK(R2)	;COMPARE LINK NUMBERS
	BEQ	XNCF		;FOUND IT
XNC3:	MOV	(R2),R2		;ADVANCE TO NEXT IN LIST
	BNE	XNC4		;AS LONG AS WE HAVE ENTRIES...
XNCNUL:	RTS	PC		;AND RETURN
XNCF:	CLZ		;SET COMPLETION CODE
	RTS	PC		;AND RETURN

	.END
