;<RAVELING>ELFTC.M11;2    25-MAY-74 00:25:20	EDIT BY RAVELING

;	1.  COMMENTED OUT CALL TO GET HOST NAME ON CLOSE COMMAND.
;	2.  ADDED CODE TO TSCANR TO FOLD LOWER TO UPPER CASE.

	.TITLE	NETTC -- SCRL ELF TERMINAL CONTROLLER
	.MCALL	$IOT,$WAIT,$POST,$STIME,$ATTCH
	.MCALL	$DFTCA,$DFDCT,$CNFIG,$DFREG,$DISCC,$DFDIR
	.MCALL	$PUSH,$POP,$DFSCC,$DFCCT,$FREEB
	.MCALL	$N.SND,$N.RCV,$N.CNT,$N.CLS
	$CNFIG
	$DFREG
	$DISCC
	.LIST	ME
	$DFSCC	;DEFINE SOCKET COMPLETION CODES
	$DFDCT	;DEFINE DEVICE CONTROL TABLE (DCT)
	$DFTCA	;DEFINE TERMINAL CONTROL AREA (TCA)
	.PAGE
	$DFCCT	;DEFINE CONN. CONTROL TABLE
	.NLIST	ME

	.GLOBL	$LGR,$ALOCW,$APCT,$DEAD,$DEBUG
	.GLOBL	$ENQ,$DCTL,$UICP
	.GLOBL	$TTYPE		;TYPE MESSAGE ON TTY
	.GLOBL	$HNDIR,$OPRO

ESCHAR = 0	;7-BIT ASCII  ** DEFAULT ** ESCAPECHAR
		;  ESCAPE DEFAULT IS <SHIFT-CONTROL-P>

CRTN = 15		;CODE FOR CARR RTN
SPCOD = 40		;ASCII CODE FOR SPACE
ASCESC = 33		;ASCII ESCAPE <CTRL-SHIFT-K>
ASCQM = 77		;QUESTION-MARK ASCII
RUBB = 177		;RUB-OUT  ASCII

CMTLEN = 0
CMTSL = 1
CMINRP = 2
CMTSTR = 4

DSKHOS = 66.		;Host for disk kludge

	.SBTTL	$LGR -- TERMINAL INITIALIZER AND LOGGER
	.PAGE

TPRIO = 3		;LOGICAL PRIORITY FOR TERMINAL CONTROL

OPPOOL = 4.		;RESOURCE POOLID FOR OPR TTY
TCPOOL = 0		;BUFFER POOLID FOR TCA'S
CCPOOL = 3		;BUFFER POOLID FOR CCT'S
LINPUL = 0		;BUFFER POOLID FOR LINE BUFFERS

LINLEN = 128.		;LINE BUFFER LENGTH, BYTES

LOGWT:	$WAIT			;WAIT FOR TERMINAL INTRPT
$LGR:	MOV	#$DCTL,R4	;GET BASE OF DCT POINTER LIST
	MOV	(R4)+,R3	;NUMBER OF ENTRIES
LOGSCN:	MOV	(R4)+,R2	;DCT PTR TO R2
	BIT	#1,DCTPCT(R2)	;IS HE BEING INITED?
	BNE 	LOGIT		;YES, ATTACH HIM
LOGI2:	DEC	R3		;DECR TALLY
	BGT	LOGSCN		;SCAN WHOLE LIST
	BR	LOGWT		;WAIT FOR WORK AGAIN
LOGIT:	$PUSH	R3,R4		;SAVE REGS
	$ATTCH	TRINI,TPRIO	;ATTACH TERMINAL CONTROL PROCESS
	$POP	R4,R3		;RECOVER POINTERS
	BR	LOGI2		;SCAN FOR MORE

	.PAGE
	.SBTTL	TRINI -- TERMINAL INITIALIZATION CONTROL PROCESS

TRINI:	$PUSH	R2		;STARTS OFF WITH R2 AS INPUT DCT
	MOV	$APCT,DCTPCT(R2) ;INIT PCT POINTER IN DCT

	MOV	(R2),R0		;GET PTR TO OUTPUT DCT
	MOV	$APCT,DCTPCT(R0) ; INIT PCT PTR FOR OUTPUT DCT
	MOV	#TCPOOL,R0	;PREPARE ALLOC TCA
	JSR	PC,$ALOCW	;ALLOCATE A TCA
	$PUSH	R1		;SAVE ITS ADRX
	MOV	#TCAL,R3	;GET TCA LENGTH
TRCLR:	CLR	(R1)+		;CLEAR THE TCA
	DEC	R3
	BGT	TRCLR
	MOV	#LINPUL,R0	;ALLOC LINE BUFFERS
	JSR	PC,$ALOCW	;GET OUTPUT LINE B.
	$POP	R2		;RECOVER TCA
	MOV	R1,TCALO(R2)	;STO LINE BUF OUT
	$POP	R3		;RECOVER DCT IN
	MOV	R3,TCADCI(R2)	;SAVE DCT PTR IN TCA
	MOV	(R3),TCADCO(R2)	;OUTPUT DCT PTR TOO
	$PUSH	R2		;NOW SAVE TCA
	MOV	#LINPUL,R0	;AND GET OUTPUT LINE BUFFER
	JSR	PC,$ALOCW	;GET LINE BUFF
	MOV	(SP),R0		;TCA ADDRX TO R0
	MOV	R1,TCALI(R0)
	MOV	#$TCAQ,R2	;PLACE TCA ON QUEUE
	BIS	#340,@#PS	;LOCKOUT
	JSR	PC,$ENQ		;ENQ TCA
	CLR	@#PS		;DROP PRIO
	MOV	(SP),R2		;TCA ADRX INTO R2
	MOVB	#ESCHAR,TCAESC(R2)	;SETUP DEFAULT ESCAPECHAR
	MOV	#TRIMS,R4	;SET INITIALIZATION MSG
	MOV	#TRIMSL,R3	;AND LENGTH
	JSR	PC,TERDIS	;DISPLAY MESSAGE
TJWRS:	MOV	#340,@#PS	;SET PROCESSOR STATUS
	MOV	TCADCI(R2),R0	;DCT INPUT ADDRX TO R0
	MOV	R2,DCTTCA(R0)	;INIT TCA ADDRX IN DCT
	MOV	TCALI(R2),DCTA(R0)	;INPUT LINE BUFFER
	MOV	#LINLEN,DCTCNT(R0)	;LINE BUFFER LEN
	CLR	@#PS		;RESTORE PROCESSOR STATUS
	MOV	TCALI(R2),TCAIPT(R2)	;SETUP INPUT PTR
TJRS:	MOV	#TPROMP,R4	;ISSUE PROMPT CHAR
	MOV	#LPROMP,R3	;LENGTH
	JSR	PC,TERDIS	;DISPLAY IT
	JSR	PC,TFETCH	;FETCH A COMMAND
	BR	TJWRS		;RESET IF RET + 0
				;AND PROCESS IT
	MOV	#$CMDTB+2,R4	;GET BASE OF CMD DIRECTORY
	JSR	PC,TSCANR	;SEARCH DIR
	BR	TE1		;CANT FIND COMMAND
	MOV	TCAIPT(R2),R1	;SETUP INPUT POINTER
	MOV	TCADCI(R2),R3	;DEV CTRL TBL PTR (INPUT)
	JSR	PC,TRSIN	;RESET INPUT BUFFER
	JSR	PC,@CMINRP(R4)	;INTERPRET COMMAND
	BR	TJWRS		;ABORT ON ERROR ESCAPE
	MOV	@SP,R2		;RECOVER TCA
	MOV	TCAIPT(R2),R1	;RESET BUFFER PTRS AGN
	MOV	TCADCI(R2),R3	;DCT IN ADDR
	JSR	PC,TRSIN	;RESET INPUT BUFFER
	BR	TJRS		;RETURN TO COLLECT COMMAND



TE1:	MOV	#TNFM,R4	;CANT FIND COMMAND
	MOV	#TNFML,R3	;SO, GIVE ERR REPLY
	JSR	PC,TERDIS	;DISPLAY ERROR CONDX
	BR	TJWRS		;JUMP BACK TO RESET PTRS

CMF:	MOV	#TMSOK,R4	;TEMP -- ISSUE 'OK'
	MOV	#TMSOKL,R3	;AND LENGTH
	JSR	PC,TERDIS	;DISPLAY IT
	RTS	PC		;AND BACK TO RESET BUFFERS
	.PAGE
	.SBTTL	TFETCH -- FETCH A DELIMITED STRING

;			***  TFETCH  ***

;			ASSUMES:
;			R2 IS TCA ADDRX

;			RETURNS:
;			R0 = ADDRX OF STRING
;			R1 = STRING LENGTH

;			RETURNS +0 IF TERMINAL
;			  ESCAPE (CTRL-SHF-P) OR RUBOUT

;			RETURNS + 2 OTHERWISE


TSTRNG:	$PUSH	#-1		;indicate fetching string
	BR	TSTRN1

TFETCH:	$PUSH	#0		;indicate fetching command
TSTRN1:	$PUSH	R2		;SAVE TCA ADDRX ASSUMED IN R2
	MOV	TCAIPT(R2),R0	;GET INITIALIZE IPT
TFET2:	MOV	TCADCI(R2),R3
	MOV	TCAIPT(R2),R1
LUP0:	CMP	R1,DCTA(R3)
	BGE	WT
	MOVB	(R1)+,R4	;OBTAIN CHAR FROM INPUT BUF
	CMPB	R4,TCAESC(R2)	;IS IT TERMINAL ESCAPE?
	BEQ	TRST		;YES, ENTER CMD MODE 
	CMPB	R4,#CRTN	;IS IT CARRRTN?
	BEQ	TPRCM		;PROCESS CMD IF SO
	CMPB	R4,#RUBB	;IS IT RUBBOUT?
	BEQ	TRUBX		;YUP, ISSUE XXX
	TST	2(SP)		;check if space or escape should terminate
	BNE	2$		;  no, do check for them
	CMPB	R4,#SPCOD	;IS IT SPACE?
	BEQ	TPRCM
	CMPB	R4,#ASCESC	;IS IT ESCAPE?
	BEQ	TPRCM
2$:	MOV	R1,TCAIPT(R2)	;UPDATE INPUT POINTER
	MOV	R1,R4		;GET INPUT POINTER
	DEC	R4		;BACKUP HIM
	MOV	#1,R3		;GET COUNT, BYTES
	$PUSH	R0		;SAVE REG0
	JSR	PC,TERDIS	;DISPLAY ON CONSOLE
	$POP	R0		;RESTORE INITIAL IPT
	BR	TFET2		;CONTINUE SCAN FOR TERMINATOR
TPRCM:	MOV	R1,TCAIPT(R2)	;UPDATE INPUT POINTER
;			R0 HAS INITIAL POINTER TO STRING
	SUB	R0,R1		;GET NR CHARS
	DEC	R1		;GET ACTUAL NR IN STRING
	$POP	R2		;RESTORE TCA ADDRX
	TST	(SP)+		;clear string indicator
	ADD	#2,(SP)		;INDICATE CMD COLLECTED
	RTS	PC		;RETURN
WT:	$PUSH	R5,R0		;SAVE RETURN ADDRX
	$WAIT			;WAIT FOR KB INPUT
	$POP	R0,R5		;RECOVER RET ADDRX
	MOV	@SP,R2		;RECOVER TCA ADDRX
	BR	TFET2		;AND FETCH INPUT


	.SBTTL	TRST -- SPECIAL CONTROL CHAR INTERPRETERS
;			*** TRST ***

;			ASSUMES
;			R1 IS INPUT BUFFER POINTER

				;ASSUME R3 = INPUT DCT
				;R2 = TCA
TRST:	JSR	PC,TRSIN	;RESET INPUT BUFFER
TRPRO:
;				R2 STILL CONTAINS A(TCA)
	$POP	R2		;RESTORE TCA POINTER
	TST	(SP)+		;clean off string indicator
	RTS	PC		;RETURN WITH RESET IND.

TRW:	$WAIT
	BR	TRW		;TEMP

TRUBX:	JSR	PC,TRSIN	;RESET INPUT BUFFER PTRS
	MOV	#TXXX,R4	;OUTPUT 'XXX' TO TERMINAL
	MOV	#TXXXL,R3	;SET A IN R4, L IN R3
	JSR	PC,TERDIS	;DISPLAY TO TERMINAL
	BR	TRPRO		;ISSUE PROMPT CHAR

	.PAGE
	.SBTTL	TSCANR -- CMD PARSER


;			***  TSCANR  ***

;			SEARCH DIRCT FOR CMD OR ARG

TSCANR:
	.if	eq	1
;--------------------------------------------------

;		BEFORE DOING ANYTHING, FOLD LOWER CASE
;		INTO UPPER CASE.

	$PUSH	R1		; SAVE LENGTH OF STRING.
	MOV	TCALI(R2),R0	; LOAD START ADDRESS OF INPUT.

FOLD:	CMPB	(R0),#141	; IS BYTE < LOWER CASE A?
	BLO	FOLDNX		;   YES - SKIP IT.
	CMPB	(R0),#172	;   NO -- IS IT > LC Z?
	BHI	FOLDNX		;      YES - SKIP IT.
				;      NO -- FOLD IT.
	MOVB	(R0),R3
	SUB	#40,R3		; SUBTRACT 40 FROM BYTE
	MOVB	R3,(R0)		; & STASH IT BACK.

FOLDNX:	INC	R0		; POINT TO NEXT BYTE.
	.LOOP	R1,FOLD		; REPEAT TIL DONE WITH STRING.

	$POP	R1		; RESTORE STRING LENGTH.

;----------------------------------------------------------------
	.endc

;			ASSUME
;			R0 = POINTER TO COMMAND STRING
;			R1 = STRING LENGTH
;			R4 = NAME DIRECTORY ADDRESS

;			RETURNS:
;			R4 = ADDRX OF DIRECTORY ENTRY

;			RETURNS + 0 IF NOT FOUND IN DIRCT
;			RETURNS + 2 OTHERWISE



TSCN1:	CMPB	R1,CMTLEN(R4)	;IS MIN LEN SPEC SATISFIED?
	BGE	TPCMPR		;YES, COMPARE STRINGS
TNFC:	MOV	-(R4),R4	;NO COMPARE, GET NEXT
	BNE	TSCN1		;AND SEARCH LIST
	RTS	PC		;RETURN W/ ERROR

TPCMPR:	$PUSH	R1		;SAVE INPUT STRING LENGTH
	MOV	TCALI(R2),R0	;LINE BUFFER IN
	MOV	R4,R3		;CMD TBL ENTR ADDR TO R3
	ADD	#CMTSTR,R3	;GET PTR TO CMD NAME
TCHK:	CMPB	(R0)+,(R3)+	;CMPR CMD STRINGS
	BNE	TNFC0		;ERROR, NO CHECK
	DEC	R1		;TALLY
	BGT	TCHK		;AND CMPR N CHARS
	CMPB	(R0),#SPCOD	;IS IT SPACE?
	BEQ	TPRC2		;PROCESS BLANK-FILL
	CMPB	(R0),#ASCESC	;IS IT ESCAPECHAR?
	BNE	TNFILL		;NOPE, NO FILLER, PLEASE
TPRC2:	CLR	R3
	MOVB	CMTSL(R4),R3		;GET STRING LENGTH
	SUB	@SP,R3		;COMPUTE AMT TO GO
	BLE	TNDS0
	$PUSH	R4		;SAVE CMD TBL PTR
	ADD	#CMTSTR,R4	;GET ADDR OF REM CHARS
	ADD	2(SP),R4	;ADD AMT INPUT
	JSR	PC,TERDIS	;DISPLAY THEM
	$POP	R4		;RESTORE CMD TBL PTR
TNFILL:
TNDS0:	$POP	R3		;RESTORE COUNTER
	$PUSH	R4		;SAVE CMDTBL PTR AGN
	MOV	#TMSPC,R4	;GET ADDRX OF A SPC
	MOV	#TMSPCL,R3
	JSR	PC,TERDIS	;DISPLAY A SPACE
	$POP	R4		;RESTORE CMD TBL PTR
	ADD	#2,(SP)		;INDICATE SUCCESS
	RTS	PC		;AND RETURN

TNFC0:	$POP	R1		;RESTORE COUNTER
	BR	TNFC

	.PAGE
	.SBTTL	TERDIS -- TERMINAL DISPLAY CONTROLLER
TERDIS:	MOV	TCADCO(R2),R0	;TERMINAL DISPLAY, GET OUT DCT
	$PUSH	R2		;SAVE TCA ADDRX
	JSR	PC,$TTYPE	;TYPE MSG ON TERMINAL
	$POP	R2		;RESTORE R2
	RTS	PC		;RETURN

;			***  $TTYPE  ***

;			TYPE MESSAGE ON USER'S TERMINAL
;			ASSUMES:
;			R0 = DCT ADDRX OF OUTPUT DEVICE
;			R3 = COUNT (BYTES)
;			R4 = ADDRESS

$TTYPE:	$PUSH	R5,R3,R4,R0	;SAVE REGS
	CMP	R0,$OPRO	;IS IT OPR TTY?
	BNE	TNNQ		;IF NOT, NO ENQ NECC.
	MOV	#OPPOOL,R0	;SETUP POOLID TO ALLOC RES.
	JSR	PC,$ALOCW	;ALLOC & WAIT IF NECC.
TNNQ:	$POP	R0,DCTA(R0),DCTCNT(R0)	;GET DCT, ADDRX, BYTE CNT
TNNQ1:	$PUSH	R0		;SAVE DCT
	$IOT			;CALL INIT IO
TDW:	$WAIT			;ENTER WAIT STATE
	MOV	@SP,R0		;GET DCT ADDRX AGAIN
	TST	DCTCNT(R0)	;HAS IO CMPL?
	BGE	TDW		;NOPE
	CMP	R0,$OPRO	;IS IT OPR
	BNE	TNNQ2		;NO DEALLOC.
	MOV	#OPPOOL,R0	;GET POOLID
	MOV	R0,R1		;SET RETURN FAKE BUFFER
	$FREEB			;FREE IT
TNNQ2:	$POP	R0,R5		;RELOAD REGS
	RTS	PC		;AND RETURN


	.SBTTL	TRSIN -- RESET INPUT BUFFER POINTERS

				;ASSUME R1 IS INPUT POINTER
				;R2 IS TCA POINTER
				;R3 IS INPUT DCT
TRSIN:	BIS	#340,@#PS	;RESET INPUT BUFFER
	MOV	TCALI(R2),R0	;INPUT LINE BFR TO R0
	MOV	R0,TCAIPT(R2)	;RESET INPUT POINTER
	BR	TMVI0		;TEST FOR NOTHING TO MOVE
TMVI:	MOVB	(R1)+,(R0)+	;MOVE DATA BACK IN BUFFR
TMVI0:	CMP	R1,DCTA(R3)	;CHECK FOR COMPL
	BLO	TMVI	;LOOP TO RESET BUFFER
	MOV	R0,DCTA(R3)	;UPDATE INPUT POINTER
	SUB	TCAIPT(R2),R0	;UPDATE COUNT
	SUB	#LINLEN,R0	;CNT = LINLEN-(DCTA-IPT)
	NEG	R0
	MOV	R0,DCTCNT(R3)	;UPDATE CNT IN DCT
	MOV	R3,R0		;SET FOR IO CONTROL
	$IOT			;CALL IO, R0 = DCT ADDR
	CLR	@#PS		;ENABLE INTS AGAIN
	RTS	PC		;AND RETURN

$TCAQ:	.WORD	0,0		;LIST OF ALL KNOWN TCA'S
	.PAGE
	.SBTTL	TPRTD -- PRINT DIRECTORY ON TERMINAL

;			***  TPRTD  ***

;			ASSUMES:
;			R4 = DIRECTORY HEAD

TPRTD:	$PUSH	R4	;SAVE DIR POINTER
TENXT:	MOV	#TCRLF,R4	;ISSUE CRLF
	MOV	#TCRLFL,R3	;LENGTH
	JSR	PC,TERDIS	;DISPLAY CRLF
	MOV	@SP,R4		;RELOAD DIR POINTER
	CLR	R3		;CLEAR HIGH BYTE
	MOVB	CMTLEN(R4),R3	;MIN LEN SPEC IN DIR
	ADD	#CMTSTR,R4	;GET ADDRX OF STRING
	JSR	PC,TERDIS	;DISPLAY MIN PORTION OF DIR ENT
	MOV	#TLBRK,R4	;ISSUE LEFT BRACKET '['
	MOV	#TLBRKL,R3	;ITS LENGTH
	JSR	PC,TERDIS	;DISPLAY IT
	MOV	@SP,R4		;FETCH DIR POINTER AGAIN
	CLR	R3		;CLEAR HIGH BYTE
	MOVB	CMTSL(R4),R3	;GET TOTL STRING LEN
	CLR	R0		;CLEAR HI BYTE
	MOVB	CMTLEN(R4),R0	;GET MIN LEN REQ. SPEC
	SUB	R0,R3		;DECREMENT OUTPUT REQ
	BEQ	TENXT2		;NONE LEFT TO DISPLAY
	ADD	R0,R4		;ADD TO GET NEW OUT. ADDR
	ADD	#CMTSTR,R4	;GET PTR TO REM WORDY PORTION
	JSR	PC,TERDIS	;ISSUE REMAINING PART OF STRING
TENXT2:	MOV	#TRBRK,R4	;RIGHT BRACKET ']'
	MOV	#TRBRKL,R3	;ITS LENGTH
	JSR	PC,TERDIS	;DISPLAY IT
	MOV	@SP,R4		;RELOAD DIR POINTER
	MOV	-(R4),R4	;GET NEXT DIR ENTRY
	BEQ	TENDIR		;AT END?
	MOV	R4,@SP		;NOPE., CONTINUE
	BR	TENXT		;BACK FOR NEXT NAME

TENDIR:	$POP	R4		;RELOAD BEGIN DIR PTR
	RTS	PC		;RETURN

	.PAGE
	.SBTTL	SCRL ELF SYSTEM COMMAND TABLE


	.LIST	ME
$CMDTB:	$DFDIR	CMD1,2,5,TXCLS,<'CLOSE'>
	.NLIST	ME
CMD1:	$DFDIR	CMD2,2,10.,TCONNX,<'CONNECT TO'>
CMD2:	$DFDIR	CMD3,1,6,TSTATX,<'STATUS'>
CMD3:	$DFDIR	CMD4,1,4,CMF,<'ECHO'>
CMD4:	$DFDIR	CMD5,1,6,CMF,<'NOECHO'>
CMD5:	$DFDIR	CMD6,1,7,TCONNX,<'TALK TO'>
CMD6:	$DFDIR	CMD7,1,9.,TXPGM,<'PAGE MODE'>
CMD7:	$DFDIR	CMD8,3,13.,TCDOS,<'DOS-BOOTSTRAP'>
CMD8:	$DFDIR	CMD9,1,5,TCMDS,<'?HELP'>
CMD9:	$DFDIR	CMD10,5,5,TCDEB,<'DEBUG'>
CMD10:	$DFDIR	CMD11,2,6,TCNDEB,<'-DEBUG'>
CMD11:	$DFDIR	CMD12,3,3,TXODT,<'ODT'>
CMD12:	$DFDIR	CMD13,2,10.,TXNPGM,<'-PAGE MODE'>
CMD13:	$DFDIR	CMD14,8.,8.,TXOPRC,<'OPERATOR'>
cmd14:	$dfdir	cmd15,6,6,BACKUP,<'BACKUP'>
cmd15:	$dfdir	cmd16,7,7,restor,<'RESTORE'>
cmd16:	$dfdir	cmd17,4,4,SEND,<'SEND'>
cmd17:	$dfdir	cmd18,3,3,get,<'GET'>
CMD18:	$DFDIR	CMD19,6,6,NOTIFY,<'NOTIFY'>
CMD19 = -2
	.PAGE
	.SBTTL	COMMAND INTERPRETERS

;			***  TCDOS  ***

;			RETURN TO DEC DISK SYSTEM

TCDOS:	.IF EQ	DOSSYS-1	;DOS SUPPORTED??
	CMP	TCADCO(R2),$OPRO	;ARE WE THE OPR?
	BNE	TRTS		;RETURN IF NOT OPR
	MOV	#3000,R3	;WAIT TILL TERMINAL I/O COMPLETE
	DEC	R3		;BEFORE RESET
	BGT	.-2		;LOOP
	MOV	#DOSRG1,R1	;MOVE DESIRED DOS REG1
	JMP	@#DOSBUT	;JMP INTO DOS BOOT
	.IFF
	BR	TRTS		;NO DOS SUPPORTED..RETURN
	.ENDC
;			***  TXODT  ***

;			XFER CONTROL TO ODT

TXODT:	CMP	TCADCO(R2),$OPRO	;ARE WE THE OPR?
	BNE	TRTS		;RETURN IF NOT
	TST	@#424		;HAS ODT BEEN INCLUDED?
	BEQ	THOOCH		;NO, SIMPLY RETURN
	MOV	@#424,PC	;JUMP TO ODT

TXOPRC:	MOV	TCADCO(R2),$OPRO	;SET NEW OPR TTY
	BR	THOOCH		;RETURN, COMPLETED

;			***  TXNPGM  ***

;			RESET PAGE MODE

TXNPGM:	BICB	#40,TCAMOD(R2)	;CLEAR PAGE-MODE FLAG IN TCA
	BR	THOOCH		;RETURN SUCCESSRUL


;			***  TXPGM  ***

;			SET PAGE MODE

TXPGM:	BISB	#40,TCAMOD(R2)	;SET PAGE-MODE FLAG IN TCA
	BR	THOOCH		;RETURN OK


;			***  TCMDS  ***

;			PRINTS COMMAND DIRECTORY TO TTY


TCMDS:	MOV	#TRCMS,R4	;'COMMANDS ARE:'
	MOV	#TRCML,R3	;MESSAGE
	JSR	PC,TERDIS	;TO TERMINAL
	MOV	#$CMDTB+2,R4	;PLACE ADDRX OF CMD TB IN R4
	JSR	PC,TPRTD	;PRINT COMMAND NAMES
	ADD	#2,(SP)		;INDICATE SUCCESS
	RTS	PC		;AND RETURN

TCDEB:	CMP	TCADCO(R2),$OPRO	;are we operator
	BNE	TRTS			;  no, error return
	MOVB	#1,$DEBUG	;GO TO DEBUG MODE
THOOCH:	ADD	#2,(SP)		;NO ERROR
TRTS:	RTS	PC
TCNDEB:	CLRB	$DEBUG		;OUT OF DEBUG MODE
	BR	THOOCH		;BUMP R5


	.PAGE
	.SBTTL	TSTATX -- OBTAIN CONNECTION STATUS
;			***  TSTATX  ***

;			OBTAIN STATUS RE: IMP/HOST

;			INVOKED BY S[TATUS] <HOSTNAME>
;			  OR	   S[TATUS] *
;			  OR	   S[TATUS] 


TSTATX:	JSR	PC,TFHNAM	;FIND HOST WITH SPEC NAME
	BR	TSTAR2		;ERROR, NO HOST SPEC
	MOV	#TMSOK,R4
	MOV	#TMSOKL,R3
	JSR	PC,TERDIS
	ADD	#2,(SP)		;INDICATE SUCCESS
TONER1:
TSTAR:	RTS	PC		;AND RETURN
TSTAR2:	MOV	#TIMSG,R4		;IMPSTAT MSG
	MOV	#TIMSGL,R3	;AND LENGTH
	JSR	PC,TERDIS	;DISPLAY IT
	TSTB	$DEAD		;IS IMP DEAD?
	BNE	TIMPD		;YES, ISSUE 'IMP DOWN'
	MOV	#TIMUP,R4	;ISSUE 'IMP UP'
	MOV	#TIMUPL,R3	;LENGTH
	JSR	PC,TERDIS	;DISPLAY IT
	BR	TSTAR		;AND RETURN

TIMPD:	MOV	#TDMSG,R4	;SETUP ADDRX OF 'DOWN'
	MOV	#TDMSGL,R3	;AND ITS LENGTH
	JSR	PC,TERDIS	;DISPLAY IT
	BR	TSTAR		;AND RETURN

	.PAGE
	.SBTTL	TCONNX -- ESTABLISH TELNET CONNECTION

TCONNX:	JSR	PC,TFHNAM	;SCAN INPUT STREAM FOR HOSTNAME
;			RETURNS WITH DIR POINTER IN R4
	BR	TONER1		;ERROR, NO NAME SPEC
	$PUSH	R4		;SAVE DIR POINTER
	JSR	PC,TFSOCK	;GET REMOTE SOCKET NR, IF ANY
	BR	TONER2		;NOT SPECIFIED (RUBOUT OR CTRL SHF P)
	$POP	R4		;RELODE DIR POINTER
	BICB	#200,TCAMOD(R2)	;CLEAR MODE RESET BIT IN TCA
	TST	TCACCI(R2)	;HAS PREV CONN BEEN ESTAB
	BNE	TRESC2		;YES, RE-CONNECT.
	$PUSH	R0		;SAVE REMOTE SOCKET NR
	BR	TCONNS		;INIT CONNECTION
TONER2:	TST	(SP)+		;DELETE DIR POINTER FM STK
	BR	TONER1		;TO ABORT

TRESC2:	JMP	TRESC		;RE-CONNECT


;			*** SEARCH CCT LIST FOR ***
;			*** PREVIOUSLY ESTABL.  ***
;			*** CONNECTION		***

;			(NOT IMPLEMENTED YET)

;			ALLOCATE CCT'S FOR NEW 
;			TELNET CONNECTION

TCONNS:	$PUSH	R2,R4		;SAVE TCA, DIR
;			***  ESTABLISH NEW CONNECTION  ***

;				STACK NOW CONTAINS
;				(SP) = DIR PTR
;				2(SP) = TCA PTR

	MOV	#CCPOOL,R0	;CCT POOLID
	JSR	PC,$ALOCW	;ALLOC & WAIT IF NECC.
	$PUSH	R1		;SAVE ADDRX OBTAINED
	MOV	#CCPOOL,R0	;POOLID
	JSR	PC,$ALOCW	;GET NEXT CCT
	$PUSH	R1
	MOV	#CCPOOL,R0
	JSR	PC,$ALOCW	;NEXT
	$PUSH	R1
	MOV	R1,R0		;STICK CCT'S OBTAINED
	$POP	R0,R3,R4,R2	;GET CCT'S AND DIR PTR IN R2
	$POP	R1
	$POP	CCTFGN+2(R0)	;POP FGN ICP SOCK
	$PUSH	R0		;SAVE ICP CCT ON STACK
	$PUSH	R1
	MOV	CMINRP(R2),(R0)	;TO CCT. SET HOSTID IN ICP CCT
	MOV	R1,R2		;RECOVER TCA ADDRESS
	MOV	R3,TCACCO(R2)	;OUTPUT (SEND) CCT
	MOV	R4,TCACCI(R2)	;INPUT (RECEIVE) CCT
	CLR	CCTFGN(R0)	;CLEAR HIGH WORD OF FGN SCK
	JSR	PC,$UICP	;ENTER USER ICP PROCEDURE.
	BR	TXERR		;ICP FAILED
	MOV	2(SP),R1	;FREE ICP CCT
	MOV	#CCPOOL,R0	;ITS NO LONGER USEFUL
	$FREEB
	MOV	@SP,R2		;RECOVER TCA ADDRX
	MOV	#TCCOM,R4
	MOV	#TCCOML,R3	;ISSUE 'CONNECTION COMPLETED'
	JSR	PC,TERDIS
	MOV	(SP)+,(SP)	;DELETE ICP ADDRX FROM STACK
	.PAGE
	.SBTTL	CONNECTION FLOW CONTROL
;			TCA ADDRX IS ASSUMED IN R2
;			AND @SP

	BR	TCONRI		;INITIALIZE RECEIVE CONNX.
TCONT2:	MOV	TCADCI(R2),R3	;PLACE DCT INPUT ADDRX IN R3
	MOV	TCAIPT(R2),R1	;GET INPUT POINTER IN R1
	MOV	TCACCO(R2),R0	;CCT OUTPUT ADDRESS TO R0
	TSTB	CCTCC(R0)	;HAS OUTPUT COMPLETED?
	BPL	TNBTN		;NO, DONT UPDATE EXLIST
	JSR	PC,TRSIN	;RESET POINTERS
	CMP	TCAIPT(R2),DCTA(R3)	;ANY INPUT?
	BHIS	TNBTN		;IF NO, DON'T SEND.
	BIS	#340,@#PS	;RAISE PRIO WHILE COMPUTE COUNT
	MOV	TCAIPT(R2),R1	;GET INPUT POINTER AGN
	MOV	DCTA(R3),R3	;UPDATE EX-LIST
	SUB	R1,R3		;COMPUTE LENGTH IN BYTES
	MOV	R1,R4		;PLACE BEGIN ADDRX TO R4
	ADD	R3,TCAIPT(R2)	;UPDATE INPUT POINTER
	MOV	TCACCO(R2),R0	;OBTAIN OUTPUT CCT
	CLR	@#PS		;DROP PRIORITY
	ASL	R3
	ASL	R3
	ASL	R3
	$N.SND		;SEND DATA ON CONNECTION
	MOV	@SP,R2	;RECOVER TCA ADDRESS
TNBTN:	MOV	TCACCI(R2),R0	;GET CCT IN
	TSTB	CCTCC(R0)	;ANY DATA RCD?
	BPL	TCONWT		;WAIT FOR DATA
	BITB	#177,CCTCC(R0)	;CHECK FOR ERROR CMP.
	BNE	TXRS00		;RESET, CONN. ERR.
	$N.CNT			;GET NUMBER OF BYTES
	ASR	R3
	ASR	R3
	ASR	R3		;DIV BITS BY 8
	MOV	@SP,R2		;OBTAIN TCA ADDRX
	MOV	#LINLEN,R1	;GET LINE BUF LEN, BYTES
	SUB	R3,R1	;COMPUTE NR BYTES GOTTEN
	MOV	TCALO(R2),R4	;ADDRESS
	MOV	R1,R3		;BYTE COUNT
	JSR	PC,TERDIS	;DISPLAY THE MESSAGE
TCONRI:	MOV	TCACCI(R2),R0	;GET CCT INPUT
	MOV	TCALO(R2),R4	;LINE BUFFER OUTPUT
	MOV	#LINLEN,R3	;ISSUE A NEW RECEIVE
	ASL	R3
	ASL	R3
	ASL	R3
	$N.RCV			;ISSUE RECEIVE FOR DATA
	BR	TXRS00		;BACK TO CHECK CMPL BITS AGN.
TCONWT:	$PUSH	R5		;SAVE RET ADDRX
	$WAIT			;RETURN TO DISPATCHER
	$POP	R5		;RESTORE RET ADDRX
TXRS00:	MOV	@SP,R2		;RECOVER TCA ADDRESS
	MOV	TCACCI(R2),R0	;GET INPUT CCT
	MOV	TCACCO(R2),R1	;AND OUTPUT CCT
	MOVB	CCTCC(R0),R3	;GET CMPL CODES
	BISB	CCTCC(R1),R3	;OR IN OUTPUT CC.
	ASL	R3		;CLEAR OFF READY BIT
	TSTB	R3		;SEE IF NO ERRORS
	BNE	TFAIL3		;BRANCH IF CONN. FAILURE
	TSTB	TCAMOD(R2)	;SEE IF TERMINAL ESCAPED
	BMI	TRSCMD		;GO TO RESET (BACK TO CMD MODE)
	BR	TCONT2		;BACK TO CHECK FOR OUTPUT DATA

	ADD	#2,(SP)		;SET SUCCESS
TCONER:	RTS	PC

TRESC:	$PUSH	R2		;SAVE TCA POINTER
	MOV	#TRCONM,R4	;RECONNECTING MESSAGE
	MOV	#TRCONL,R3	;IST LENGTH
	JSR	PC,TERDIS
	BR	TCONT2		;CONTINUE WITH PRE-ESTAB CONN
TFAIL2:			;FAILED WHILE ATTEMPTING CONNX
TXERR:	MOV	@SP,R2		;RECOVER TCA ADDRESS
	MOV	#TFAILM,R4	;ADDRESS OF MSG
	MOV	#LTFAIL,R3		;ITS LENGTH
	JSR	PC,TERDIS	;DISPLAY 'FAILED'
	MOV	2(SP),R0	;PASS ICP CCT ADDR
	JSR	PC,TXERSY	;ERROR ANALYSIS
	MOV	2(SP),R1	;GET ICP CCT ADDRX
	MOV	#CCPOOL,R0	;FREE IT
	$FREEB
	MOV	@SP,R3		;SETUP TO GET DATA
	ADD	#TCACCI,R3
	MOV	(R3),R1		;GET CCT IN ADDRX
	CLR	(R3)+		;CLEAR OLD POINTER
	$PUSH	(R3)		;SAVE NEXT PTR
	CLR	(R3)		;CLEAR IT
	MOV	#CCPOOL,R0	;GET CCT POOLID
	$PUSH	R0
	$FREEB			;FREE THE CCT
	$POP	R0,R1		;GET PARAMS FOR $FREEB
	$FREEB			;FREE OUTPUT CCT
	MOV	(SP)+,(SP)	;DELETE ICP CCT POINTER
TRSCMD:	$POP	R2		;POP TCA ADDRX
	RTS	PC		;AND RETURN

TFAIL3:	CMPB	#WCCCLS,CCTCC(R0)	;DID HE CLOSE US?
	BEQ	TXRCLS		;OK, REMOTE CLOSE.
	CMPB	#WCCCLS,CCTCC(R1)	;CHECK OUTPUT CCT TOO
	BEQ	TXRCLS		;HE TERMINATED.
	MOV	#TFAILM,R4	;TO HERE IF FAIL DURING
	MOV	#LTFAIL,R3	;CONNECTION ESTAB.
	JSR	PC,TERDIS	;DISPLAY 'CONN FAILED'
	JSR	PC,TXERS2	;DETERMINE CCT IN ERROR
	BR	TRSCM2		;BACK TO COMMAND MODE
TXRCLS:	MOV	#TRCMSG,R4	;MESSAGE 'REMOTE CLOSE'
	MOV	#TRCMSL,R3	;ITS LENGTH
	JSR	PC,TERDIS	;DISPLAY IT
TRSCM2:	MOV	@SP,R2		;TCA ADDRX
	MOV	TCACCI(R2),R0	;CCT INPUT
	$N.CLS			;ISSUE CLOSE
	MOV	@SP,R2		;TCA AGAIN
	MOV	TCACCO(R2),R0
	$N.CLS			;CLOSE OUTPUT
	$STIME	15000.		;SET TIME TO 15 SECS.
	MOV	@SP,R2		;TCA AGAIN
TRSFR1:	MOV	TCACCO(R2),R1	;CCT OUTPT AGAIN
	TSTB	CCTCC(R1)	;IS HE POSTED?
	BMI	TRSFRQ		;FREE THE CCT'S
TRSFR0:	$WAIT			;AND WAIT TILL CLOSED
	MOV	@SP,R2		;TCA ADDRX
	BIT	#TIM,-(R4)	;HAS TIMER GONE OFF?
	BEQ	TRSFR1		;WAIT FOR COMPLETE
;			TIMER HAS EXPIRED
TRSFRQ:	MOV	#CCPOOL,R0
	$FREEB
	MOV	@SP,R2		;GET TCA AGAIN
	MOV	TCACCI(R2),R1
	MOV	#CCPOOL,R0
	$FREEB
	MOV	@SP,R2		;TCA ADDRX
	CLR	TCACCI(R2)
	CLR	TCACCO(R2)
	BR	TRSCMD		;BACK TO COMMAND MODE


TXERSY:	BITB	#177,CCTCC(R0)	;TCHECK ERROR IN ICP CCT
	BNE	TXCEC		;GOT ONE IN ERROR
TXERS2:	MOV	TCACCI(R2),R0	;ERROR ANALYSIS, GET CCT IN
	BITB	#177,CCTCC(R0)	;IS CCT IN THE ONE IN ERR?
	BNE	TXCEC		;YES, SKIP LOAD CCT OUT
	MOV	TCACCO(R2),R0	;GET OUT CCT
TXCEC:	MOVB	CCTCC(R0),R0	;GET C COD
	CMPB	#WCCHD,R0	;HOST DISCONNECTED?
	BEQ	TXEHD		;YUP
	CMPB	#WCCDED,R0	;IMP (LOCAL) DEAD?
	BEQ	TXEID
	CMPB	#WCCCLS,R0	;CLOSED?
	BEQ	TXERJ		;YUP
	CMPB	#WCCTIM,R0	;TIMEOUT ERR?
	BEQ	TXETIM		;YES, GIVE NOTICE
	MOV	#TVALER,R4	;ELSE MUST BE VALIDATION ERROR
	MOV	#TVALEL,R3	;LENGTH MSG
	BR	TXED		;GO TO ISSUE MESSAGE
TXEMRT:	RTS	PC		;RETURN

TXEHD:	MOV	#HDMSG,R4	;ADDR MSG
	MOV	#HDMSGL,R3
TXED:	JSR	PC,TERDIS
	BR	TXEMRT
TXEID:	MOV	#IDMSG,R4
	MOV	#IDMSGL,R3
	BR	TXED

TXERJ:	MOV	#RJMSG,R4
	MOV	#RJMSGL,R3
	BR	TXED
TXETIM:	MOV	#TTIMSG,R4	;TIMER ERROR
	MOV	#TTIMSL,R3
	BR	TXED



	.PAGE
	.SBTTL	TXCLS -- TERMINAL COMMAND 'CLOSE'

TXCLS:;	JSR	PC,TFHNAM	;FIND HOST NAME
;	BR	TXCLSR		;NONE SPECIFIED
TXCLS:	JSR	PC,TFCCTL	;GET CCT'S ASSOC.
	BR	TXCLER		;CAN'T FIND!
	$PUSH	R2,R4,R3	;R3=SND CCT, R4 = RCV CCT
	MOV	R4,R0		;CLOSE CONNECTION
	$N.CLS			;ISSUE CLOSE
	MOV	@SP,R0		;NEXT  CCT
	$N.CLS			;ISSUE CLOSE
	$STIME	15000.		;SET TIME LIMIT TO 15 SECS
TXCLSW:	$WAIT			;WAIT FOR COMPLETION OF CLS
	MOV	@SP,R0		;CHECK POSTED
	BIT	#TIM,-(R4)	;TIMER GONE OFF?
	BNE	TXLAX		;YES, FLUSH THE TOILET.
	TSTB	CCTCC(R0)	;IS HE CLOSED?
	BPL	TXCLSW		;NOPE
	MOV	2(SP),R0	;IS HE CLOSED
	TSTB	CCTCC(R0)
	BPL	TXCLSW		;NOPE
TXLAX2:	MOV	R0,R1		;FREE STORAGE USED BY CCTS
	MOV	#CCPOOL,R0	;POOLID
	$FREEB
	MOV	@SP,R1
	MOV	#CCPOOL,R0
	$FREEB
	MOV	4(SP),R2	;TCA ADDRX
	CLR	TCACCI(R2)	;INDIC NO ACTIVE CONN
	CLR	TCACCO(R2)	;NONE
	MOV	#TXCMSG,R4	;ADDR OF 'CONN. CLOSED'
	MOV	#TXCMSL,R3	;ITS LENGTH
	JSR	PC,TERDIS
	ADD	#6,SP		;SKIP OVER PARAMS
TXCLER:
TXCLSR:	ADD	#2,(SP)		;INDIC NO ERROR
	RTS	PC

TFSOCK:	MOV	TCAIPT(R2),R1	;GET SOCKET NR FOR CONNECT
	CMPB	#CRTN,-(R1)		;DID PREV CMD TERMINATE?
	BEQ	TFS01		;YES, DEFAULT TO SCK 1
	JSR	PC,TFETCH	;GET NUMBERS
	RTS	PC		;RUBOUT
	TST	R1		;ANYTHING GOTTEN?
	BEQ	TFS01		;NO, USE DEFAULT
	JSR	PC,$BLDCN	;BUILD A DEC NR
	BLE	TFS01		;IF 0 OR NEG, USE DEFAULT
TFSRT:	ADD	#2,(SP)		;INCREMENT R.A., IND SUCCESS
	RTS	PC		;RETURN
TFS01:	MOV	#1,R0		;SET COMPLETION SOCK
	BR	TFSRT		;RETURN
TXLAX:	MOV	#TXCTM,R4	;MESSAGE ADDR
	MOV	#TXCTML,R3	;NR BYTES
	MOV	4(SP),R2	;TCA ADDRESS TO R2
	JSR	PC,TERDIS	;DISPLAY IT
	MOV	2(SP),R0	;CT ADDR TO R0
	BR	TXLAX2		;BACK TO FREE THE CONNECTION
	.PAGE

;			***  $BLDCN  ***

;			BUILDS A BINARY NUMBER FROM
;			A STRING OF DIGITS

;			ASSUMES R0 = POINTER TO STRING
;			R1 = BYTE COUNT

;			RETURNS  R0 = BINARY NR

$BLDCN:
	.IF EQ	PMDV-1
	$PUSH	R5
	CLR	R5		;INIT MUL REGISTER
	.ENDC
	.IF EQ	PEAE-1		;EAE AVAILABLE?
	CLR	@#MQ		;CLEAR MQ
	.ENDC
	.IF EQ	PEAE!PMDV	;NEITHER EAE NOR MULDIV?
	CLR	$MQ		;CLEAR SOFT MQ
	MOV	#10.,$XMUL	;SET MULTIPLIER EQ 10
	.ENDC
BLDN00:	MOVB	(R0)+,R3	;SET FIRST DIG
	BIC	#177760,R3	;TRIM BITS
	.IF EQ	PEAE!PMDV	;NEITHER EAE NOR MULDIV?
	JSR	PC,$MUL		;MULTIPLY BY 10.
	ADD	R3,$MQ		;ADD RESULT
	.ENDC
	.IF EQ	PMDV-1		;MULDIV?
	MUL	#10.,R5		;MULTIPLY BY 10.
	ADD	R3,R5
	.ENDC
	.IF EQ	PEAE-1
	MOV	#10.,@#XMPY	;TIMES 10
	ADD	R3,@#MQ		;ACCUMULATE
	.ENDC
	DEC	R1		;TALLY
	BGT	BLDN00		;LOOP...
	.IF EQ	PEAE-1
	MOV	@#MQ,R0		;RESULT TO R0
	.ENDC
	.IF EQ	P1140!P1145-1
	MOV	R5,R0
	$POP	R5
	TST	R0		;SET C.C.
	.ENDC
	RTS	PC		;AND RETURN

;			RESULT  -32768 < N < 32767


TFHNAM:	JSR	PC,TFETCH
	BR	TFERR		;ERROR
	CMPB	@R0,#ASCQM	;WAS HOSTNAME '?'
	BEQ	TFHPHN		;IF SO, PRINT HOSTNAMES
	MOV	#$HNDIR+2,R4	;SETUP DIR ADDR
	JSR	PC,TSCANR	;SCAN FOR HOSTNAME
	BR	TFERR		;ERROR
	ADD	#2,(SP)		;INDICATE SUCCESS
TFERR:	RTS	PC		;AND RETURN

TFHPHN:	MOV	#TRHOS,R4	;'HOSTS ARE:' MSG
	MOV	#TRHOSL,R3
	JSR	PC,TERDIS
	MOV	#$HNDIR+2,R4	;HOST-NAME-TABLE DIRECTORY
	JSR	PC,TPRTD	;PRINT DIRECTORY
	RTS	PC		;RETURN TO ABORT

;			***  TFCCTL  ***

;			FINDS CONNECTIONS ASSOC.
;			WITH <HOSTID>,<ICP SOCK>


TFCCTL:	MOV	TCACCI(R2),R4	;INPUT CONNECTION
	BEQ	TFCCR		;RETURN IF NONEXIST
	MOV	TCACCO(R2),R3	;OUTPUT CONN
	BEQ	TFCCR
	ADD	#2,(SP)		;INDICATE SUCCESS
TFCCR:	RTS	PC		;RETURN



	.sbhed	RK05 cartridge backup and restore.

	.globl	rdsk,wdsk,da,sercnt,hercnt,begblk,endblk
	.globl	inidsk,inird,dskwt,toggle

SEND:	$PUSH	R2
GDAD:	MOV	#DADMSG,R4
	MOV	#DADMSL,R3
	JSR	PC,TERDIS	;ask for starting disk address
	MOV	@SP,R2
	JSR	PC,TFETCH	;get the number
	BR	GDAD		;try again if error
	JSR	PC,NIN		;convert the number
	BR	GDAD		;try again if error
	CMP	R5,#406.*16.	;check if legal
	BHIS	1$
	MOV	R5,R4
	BIC	#^C17,R4
	CMP	R4,#12.
1$:	BLO	2$
	JSR	PC,NINERR
	BR	GDAD
2$:	MOV	R5,BEGBLK
GBLK:	MOV	#BLKMSG,R4
	MOV	#BLKMSL,R3
	MOV	@SP,R2
	JSR	PC,TERDIS	;ask for number of blocks
	MOV	@SP,R2
	JSR	PC,TFETCH	;get the number
	BR	GBLK		;try again if error
	JSR	PC,NIN		;convert the number
	BR	GBLK		;try again if error
	TST	R5		;make sure legal disk addr & number of blocks
	BMI	3$
	CLR	R4
	DIV	#12.,R4
	MOV	BEGBLK,R3
	ASH	#4,R4
	BIC	#17,R3
	ADD	R4,R3
	MOV	BEGBLK,R4
	BIC	#^C17,R4
	ADD	R4,R5
	CLR	R4
	DIV	#12.,R4
	ASH	#4,R4
	BIS	R5,R4
	ADD	R4,R3
	CMP	R3,#406.*16.
	BLOS	4$
3$:	JSR	PC,NINERR
	BR	GBLK
4$:	MOV	R3,ENDBLK
	MOV	#TRAMSG,R4
	MOV	#TRAMSL,R3
	MOV	@SP,R2
	JSR	PC,TERDIS
	BR	BACKU1		;go backup with BEGBLK & ENDBLK set

backup:	$push	r2
	mov	#406.*16.,endblk
	clr	begblk
backu1:	$stime	30000.
	mov	#bakcct,r0
	mov	r0,rbcct
	$n.con
	$wait

	bit	#ack,-(r4)
	bne	bakcon

barf:	mov	#tfailm,r4
	mov	#ltfail,r3
	mov	@sp,r2
	jsr	pc,terdis

bakex:	mov	rbcct,r0
	$n.cls
	$pop	r2
	tst	hercnt
	beq	chksft
	mov	#hernum,r4
	mov	#5,r3
	mov	hercnt,r1
	jsr	pc,nout
	mov	#hermsg,r4
	mov	#ermsgl,r3
	jsr	pc,terdis
chksft:	tst	sercnt
	beq	jmptho
	mov	#sernum,r4
	mov	#5,r3
	mov	sercnt,r1
	jsr	pc,nout
	mov	#sermsg,r4
	mov	#ermsgl,r3
	jsr	pc,terdis
jmptho:	jmp	thooch

bakcon:	bic	#ack,@R4
	bitb	#177,bakcct+2
	bne	barf
	mov	#stmess,r4
	mov	#9.,r3			;Message count
	mov	@sp,r2			;Make sure we have TCA address
	jsr	pc,terdis		;Print it

; Start up the disk

	jsr	pc,inidsk		;Turn interrupts on 
	jsr	pc,inird		;Do first read

bakloo:	cmp	@da,endblk
	bhis	bakend
	jsr	pc,rdsk
	mov	#bakcct,r0
	mov	#514.*8.,r3
	mov	da,r4
	$n.snd

bakwt:	$wait
	bit	#ack,-(r4)
	beq	bakwt
	bic	#ack,(r4)
	bitb	#177,bakcct+2
	bne	barf
	jsr	pc,toggle
	br	bakloo

bakend:	mov	#donem,r4
	mov	#6,r3
	mov	@sp,r2		;Restore TCA address
	jsr	pc,terdis
	br	bakex




donem:	.ascii	<15,12>"done"

stmess:	.ascii	"started"<15,12>		;Start-up message

hermsg:	.ascii	<15,12><40,40,40,40,40>
hernum:	.ascii	" hard disk errors"
sermsg:	.ascii	<15,12><40,40,40,40,40>
sernum:	.ascii	" soft disk errors"
ermsgl	=	.-sermsg
	.even

rbcct:	0
bakcct:	DSKHOS,4000,.+1,0,3000
rescct:	0,4000,3002,0,0




bakexj:	jmp bakex


GET:	DEC	GETFLG		;indicate that this is GET, not restore
Restor:	$push	r2
	mov	#rescct,r0
	mov	r0,rbcct
	$n.lsn
reslw:	$wait
	bit	#ack,-(r4)
	beq	reslw
	bic	#ack,(r4)
	bitb	#177,rescct+2
	bne	barfj
	cmp	rescct,#DSKHOS
	bne	bakexj
	mov	#rescct,r0
	$n.con
	$wait
	bit	#ack,-(r4)
	beq	barfj
	bic	#ack,(r4)
	bitb	#177,rescct+2
	bne	barfj
	mov	#stmess,r4
	mov	#9.,r3
	mov	@sp,r2
	jsr	pc,terdis

	jsr	pc,inidsk

resloo:	mov	#rescct,r0
	mov	#514.*8.,r3
	mov	da,r4
resrcv:	$n.rcv

recv1:	$wait
	bit	#ack,-(r4)
	beq	recv1
	bic	#ack,(r4)
	bitb	#177,rescct+2
	bne	resend
	mov	#rescct,r0
	$n.cnt
	mov	r3,r4
	beq	reswr
	neg	r4
	add	#514.*8.,r4
	ash	#-3,r4
	add	da,r4
	br	resrcv

reswr:	jsr	pc,wdsk
	br	resloo

barfj:	jmp	barf

resend:	jsr	pc,dskwt
	tst	getflg
	bne	5$
	cmp	@da,#406.*16.
	blo	barfj
5$:	clr	getflg
	jmp	bakend

nout:	clr	r0
	div	#10.,r0
	bis	#60,r1
	movb	r1,-(r4)
	mov	r0,r1
	sob	r3,nout
	rts	pc

NIN:	CLR	R3
	CLR	R5
	TST	R1
	BLE	NINRTN
NINLP:	MOVB	(R0)+,R3
	MOV	R3,R4
	BIC	#7,R4
	CMP	#60,R4		;make sure it's a digit
	BNE	NINERR
	BIC	#^C7,R3
	ASH	#3,R5
	BIS	R3,R5
	SOB	R1,NINLP
NINRTN:	ADD	#2,(SP)
	RTS	PC

NINERR:	MOV	#QUEST,R4
	MOV	#QUESTL,R3
	MOV	2(SP),R2
	JSR	PC,TERDIS
	RTS	PC

QUEST:	.ASCII	" ?"
QUESTL	= 2
DADMSG:	.ASCII	<15,12>"STARTING DISK ADDRESS:  "
DADMSL	= .-DADMSG
BLKMSG:	.ASCII	<15,12>"NUMBER OF BLOCKS (8):  "
BLKMSL	= .-BLKMSG
TRAMSG:	.ASCII	<15,12>"TRANSFER "
TRAMSL	= .-TRAMSG

NOTIFY:	CMP	TCADCO(R2),$OPRO	;are we operator
	BEQ	2$
	JMP	TRTS			;  no, return error
2$:	$PUSH	R2
	MOV	#NOTMSG,R4
	MOV	#NOTMSL,R3
	JSR	PC,TERDIS
1$:	MOV	TCAIPT(R2),R1
	MOV	TCADCI(R2),R3
	JSR	PC,TRSIN
	MOV	#TCRLF,R4
	MOV	#TCRLFL,R3
	JSR	PC,TERDIS
	JSR	PC,TSTRNG
	BR	1$
	$PUSH	R0,R1
	MOV	#TCRLF,R4
	MOV	#TCRLFL,R3
	JSR	PC,TERDIS
	MOV	#$TCAQ,R2
NOTLP:	MOV	(R2),R2
	MOV	(SP),R3
	MOV	2(SP),R4
	JSR	PC,TERDIS
	MOV	#TCRLF,R4
	MOV	#TCRLFL,R3
	JSR	PC,TERDIS
	TST	(R2)
	BNE	NOTLP
	ADD	#4,SP
	$POP	R2
	JMP	THOOCH

NOTMSG:	.ASCII	<15,12>"Enter one line message ended with <cr>"
NOTMSL	= .-NOTMSG

GETFLG:	.WORD	0

	.PAGE
	.SBTTL	SYSTEM MESSAGES
	.NLIST	BEX
TCRLF:
TRIMS:	.BYTE	15,12		;CRLF
TCRLFL = .-TCRLF	;LENGTH OF CRLF
	$SNAME		;SET ASCII SYSTEM NAME
TRIMSL = .-TRIMS
TLBRK:	.ASCII	'['	;LEFT BRACKET
TLBRKL = .-TLBRK
TRBRK:	.ASCII	']'	;RIGHT BRACKET
TRBRKL = .-TRBRK
TRCMS:	.BYTE	15,12	;COMMANDS MSG
	.ASCII	'COMMANDS ARE:'
TRCML = .-TRCMS
TRHOS:	.BYTE	15,12
	.ASCII	'HOSTS ARE:'
TRHOSL = .-TRHOS
TPROMP:	.BYTE	15,12,12
	.ASCII	'#'
LPROMP = .-TPROMP
TXXX:	.ASCII	'XXX'
TXXXL = .-TXXX
TNFM:	.ASCII	' (?)'
TNFML = .-TNFM
TMSOK:
TMSPC:	.ASCII	' '
TMSPCL = .-TMSPC
	.ASCII	'OK'
TMSOKL = .-TMSOK
TIMUP:	.ASCII	'UP.'
TIMUPL = .-TIMUP
TDMSG:	.ASCII	'DOWN.'
TDMSGL = .-TDMSG

TIMSG:	.BYTE	15,12
	.ASCII	'IMP IS '
TIMSGL = .-TIMSG

TCCOM:	.BYTE	15,12
	.ASCII	'CONNECTION COMPLETED.'
	.BYTE	15,12
TCCOML = .-TCCOM
TRCONM:	.BYTE	15,12
	.ASCII	'RECONNECTING.'
	.BYTE	15,12,12
TRCONL = .-TRCONM
TFAILM:	.BYTE	15,12	;CRLF
	.ASCII	'CONNECTION FAILED -- '
LTFAIL = .-TFAILM
HDMSG:	.ASCII	'HOST IS DISCONNECTED.'
HDMSGL = .-HDMSG
IDMSG:	.ASCII	'IMP IS DOWN.'
IDMSGL = .-IDMSG
RJMSG:	.ASCII	'WE WERE REJECTED.'
RJMSGL = .-RJMSG
TTIMSG:	.ASCII	'TIMED OUT.'
TTIMSL = .-TTIMSG
TRCMSG:	.BYTE	15,12
	.ASCII	'CONNECTION CLOSED REMOTELY'
TRCMSL = .-TRCMSG

TVALER:	.ASCII	'INVALID SOCKET STATE.'
TVALEL = .-TVALER
TXCMSG:	.BYTE	15,12	;CRLF
	.ASCII	'CONNECTION CLOSED.'
TXCMSL = .-TXCMSG
TXCTM:	.BYTE	15,12	;CRLF
	.ASCII	'CLOSE FAILED -- TIMED OUT.'
TXCTML	=	.-TXCTM


	.EVEN

	.END





                                                                                                                                                                                                                                                                                                                                                                                                                               